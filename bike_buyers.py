# -*- coding: utf-8 -*-
"""bike_buyers.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZOEsmEPu0Pzifgi-oxRVLFBDfk4IZPk0
"""

#import libraries
import pandas as pd
pd.set_option('display.max_columns', 1500)
pd.set_option('display.max_rows', 1500)
import numpy as np

#inspetion of data
def inspect_data(df, col=None, n_rows=10):
    #check data shape
    print(f'data shape:{df.shape}')

    #define column
    if col is None:
        col = df.columns

    #check head data,
    display(df[col].head(n_rows))

#check missing of data
def check_missing(df, cut_off=0, sort=True):
    freq=df.isnull().sum()
    percent=df.isnull().sum()/df.shape[0]*100
    types=df.dtypes
    unique = df.apply(pd.unique).to_frame(name='Unique Values')['Unique Values']
    df_miss=pd.DataFrame({'missing_percentage':percent, 'missing_frequency':freq, 'types':types, 'unique_values':unique})
    if sort: df_miss.sort_values(by='missing_frequency',ascending= False, inplace=True)
    return df_miss[df_miss['missing_percentage'] >= cut_off]

#checking for missing values in data
def fillna_by_metric(df, column_name, metric='mean', custom_value=None):
    # Retrieve metric values according to the input
    if metric == 'mean':
        metric_value = df[column_name].mean()
    elif metric == 'median':
        metric_value = df[column_name].median()
    elif metric == 'mode':
        metric_value = df[column_name].mode().iloc[0]
    elif metric == 'zero':
        metric_value = 0
    elif metric == 'custom':
        metric_value = custom_value
    else:
        raise ValueError("Invalid metric type")

    # Fill the missing value in the column with the retrieved metric value
    df[column_name].fillna(value=metric_value, inplace=True)

    return df

#load data
df = pd.read_csv('bike_buyers.csv')
inspect_data (df, n_rows=10)

check_missing(df)

df.head(10)

df.info()

#for segmentation analysis

#regression linear anaylsis

import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

#load a data into pandas Dataframe
df = pd.read_csv('bike_buyers.csv')

#remove any special characters and convert to float
def clean_currency(value):
  return float(value.replace('$', '').replace(',', ''))

df['Income'] = df['Income'].apply(clean_currency)

#the features that using in the data
X = df[['Income', 'Age', 'Children', 'Cars']]

#the target variable (dependent variable) to be predicted
y = df['Income']

#divide data into training data and test data
#80% as training data and 20% as test data

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#create a regression linear model
model = LinearRegression()
model.fit(X_train, y_train)

#make predictions using regression models on test data
y_pred = model.predict(X_test)

#model performance evaluation
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error (MSE): {mse}')
print(f'R-squared (R2): {r2}')

#visualization of regression results
plt.scatter(y_test, y_pred)
plt.xlabel('Actual Income')
plt.ylabel('Predicted Income')
plt.title('Scatter plot: Actual Income vs Predicted Income')
plt.show()

#for prediction analysis

#Regression Linear Analysis

import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score

# Load data into a pandas DataFrame
dataframe = pd.read_csv('bike_buyers.csv')

# Remove dollar sign and commas, then convert to float
dataframe['Income'] = dataframe['Income'].replace('[\$,]', '', regex=True).astype(float)

y_train = dataframe['Income']

# Separate features (X) and targets (y)
X = dataframe[['Age', 'Children', 'Cars']]
y = dataframe['Income']

# Split data into train and test data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Perform data scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Create regression linear model
model = LinearRegression()

# Train the model on the training data
model.fit(X_train_scaled, y_train)

# Income prediction using test data
y_pred = model.predict(X_test_scaled)

# Model evaluation using Mean Squared Error (MSE) and R-squared metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error (MSE): {mse}')
print(f'R-squared: {r2}')
print('Koefisien Regresi:', model.coef_)
print('Konstanta Regresi:', model.intercept_)